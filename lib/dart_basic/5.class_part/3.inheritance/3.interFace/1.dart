//*ডার্ট (Dart) ভাষাত Interface হৈছে এক ধৰণৰ সংজ্ঞা (contract), যাৰ মাধ্যমে আপুনি ক'ৰবাতো কিছু মেথড আৰু গুণাবলী (properties) নিৰ্ধাৰণ কৰিব পাৰে, যাক কোনো অন্য ক্লাছ ইমপ্লিমেণ্ট (implement) কৰিব লাগে। ডাৰ্টত, Interface তে কোনো ক্লাছৰ ভিতৰত মেথডৰ সংজ্ঞা থাকে কিন্তু ইয়াৰ কোনো বাস্তৱায়ন (implementation) নাথাকে। এজন ক্লাছ যি ইণ্টাৰফেইচ ইমপ্লিমেণ্ট কৰে, সেই ক্লাছক সেই ইণ্টাৰফেইচৰ মেথডসমূহ পূৰ্ণৰূপে বাস্তৱায়ন (implement) কৰিব লাগে।

//*ডাৰ্টত, ইণ্টাৰফেইচৰ বিষয়ে এক গুৰুত্বপূর্ণ দিশ হৈছে যে ডাৰ্টৰ কোনো পৃথক ইণ্টাৰফেইচ কীবোৰ্ড নাই। ডাৰ্টত যিকোনো ক্লাছক ইণ্টাৰফেইচ হিচাপে ব্যৱহাৰ কৰিব পৰা যায়, আৰু কোনো ক্লাছ যি অন্য ক্লাছৰ ইণ্টাৰফেইচ ইমপ্লিমেণ্ট কৰে, সেয়া ঐ ক্লাছৰ মেথডসমূহ পূৰ্ণৰূপে বাস্তৱায়ন কৰিব লাগে।

//*1. Interface কি?
//ইণ্টাৰফেইচ হৈছে এক ধৰণৰ চুক্তি (contract) য'ত মেথড আৰু গুণাবলী ডিফাইন কৰা থাকে, কিন্তু ইয়াৰ কোনো বাস্তৱায়ন বা কাৰ্যপ্ৰণালী থাকে নাথাকে। যি ক্লাছ ইণ্টাৰফেইচ ইমপ্লিমেণ্ট কৰে, সেয়া ঐ মেথডসমূহৰ পূৰ্ণ বাস্তৱায়ন দিব লাগে।

//*2. ডাৰ্টত ইণ্টাৰফেইচৰ ব্যৱহাৰ:
//ডাৰ্টত, ইণ্টাৰফেইচ হ'ব পাৰে কোনো ক্লাছ অথবা মিক্সিন। ইয়াৰ বাবে কোনো পৃথক interface কীবোৰ্ডৰ প্ৰয়োজন নাই। আপুনি যিকোনো ক্লাছক ইণ্টাৰফেইচ হিচাপে ব্যৱহাৰ কৰিব পাৰে, আৰু implements কীবোৰ্ড ব্যৱহাৰ কৰি সেই ক্লাছৰ মেথডসমূহ ইমপ্লিমেণ্ট কৰিব পাৰে।

//উদাহৰণৰ সহায়ত বুজা:
//ধৰোঁ, আমাৰ ২টা ক্লাছ আছে: Animal (এটা ইণ্টাৰফেইচ হিচাপে ব্যৱহৃত) আৰু Dog (যি ইণ্টাৰফেইচটি ইমপ্লিমেণ্ট কৰিছে)।

//// Animal ক্লাছক Interface হিচাপে ব্যৱহাৰ কৰা হৈছে
//class Animal {
//void eat();  // Abstract method, no implementation
//void sleep(); // Abstract method, no implementation
//}


//// Dog ক্লাছ যি Animal ইণ্টাৰফেইচ ইমপ্লিমেণ্ট কৰিছে
//class Dog implements Animal {
//@override
//void eat() {
//print("Dog is eating");
//}

//@override
//void sleep() {
//print("Dog is sleeping");
//}


//void bark() {
//print("Dog is barking");
//}
//}


//void main() {
//// Dog ক্লাছৰ অবজেক্ট সৃষ্টি
//var dog = Dog();

//dog.eat();   // Dog is eating
//dog.sleep(); // Dog is sleeping
//dog.bark();  // Dog is barking
//}

//ব্যাখ্যা:
//Animal ক্লাছ: এইটো ইণ্টাৰফেইচৰ দৰে আচৰণ কৰি, eat() আৰু sleep() মেথড ডিফাইন কৰে। কিন্তু, ইয়াৰ কোনো বাস্তৱায়ন নাথাকিব, কেবল মেথডৰ চুক্তি থাকে।

//Dog ক্লাছ: এই ক্লাছটো implements কীবোৰ্ড ব্যৱহাৰ কৰি Animal ক্লাছৰ ইণ্টাৰফেইচ ইমপ্লিমেণ্ট কৰিছে। ইয়াত, Dog ক্লাছটো eat() আৰু sleep() মেথডৰ বাস্তৱায়ন দিয়াৰ লগতে আন মেথড bark() যুক্ত কৰিছে।

//Main function: Dog ক্লাছৰ অবজেক্ট সৃষ্টি কৰা হৈছে আৰু ইণ্টাৰফেইচৰ মেথডসমূহক কল কৰা হৈছে। Dog ক্লাছৰ মেথড eat() আৰু sleep() বাস্তৱায়িত হৈছে আৰু ক্লাছৰ নিজস্ব মেথড bark() বৰ্তমান।

//*3. ইণ্টাৰফেইচৰ সুবিধাসমূহ:
//কোডৰ পুনঃব্যৱহাৰ: ইণ্টাৰফেইচৰ মাধ্যমে একাধিক ক্লাছৰ মাজত সমান মেথড আৰু গুণাবলী ব্যৱহাৰ কৰিব পাৰি। এয়ে কোডৰ পুনঃব্যৱহাৰ উন্নত কৰে।
//অভ্যন্তৰীণ কাঠামো স্পষ্টীকৰণ: ইণ্টাৰফেইচে অন্য ক্লাছৰ মেথডৰ পৰিসৰ স্পষ্ট কৰি তোলে, যাৰ মাধ্যমে আপুনি ক্লাছসমূহৰ আচৰণ আগভাগৰ পৰা চিনি পোৱাকৈ ডিজাইন কৰিব পাৰে।
//পৰিসৰ নিয়ন্ত্ৰণ: ইণ্টাৰফেইচৰ মাধ্যমে আপুনি নিশ্চিত কৰিব পাৰিব যে যিসকল ক্লাছ সেই ইণ্টাৰফেইচ ইমপ্লিমেণ্ট কৰিছে, সেয়া সেয়া মেথডসমূহৰ বাস্তৱায়ন আগবঢ়াইছে।


//*4. ইণ্টাৰফেইচৰ সীমাবদ্ধতা:
//ইণ্টাৰফেইচৰ মেথডবোৰ পূৰ্ণৰূপে বাস্তৱায়ন কৰিব লাগে: যি ক্লাছ ইণ্টাৰফেইচ ইমপ্লিমেণ্ট কৰে, সেয়া ঐ ইণ্টাৰফেইচৰ সকলো মেথড পূৰ্ণৰূপে বাস্তৱায়ন কৰিব লাগে। যদি কোনো মেথড ইমপ্লিমেণ্ট নকৰে, তেন্তে সেই ক্লাছটো কম্পাইল নহব।
//গুণাবলী সংজ্ঞা নাথাকিব পাৰে: ইণ্টাৰফেইচত মেথডৰ পৰিসৰ থাকে, কিন্তু গুণাবলীৰ কোনো পৰিসৰ নাথাকে (ডাৰ্টত গুণাবলী ইণ্টাৰফেইচত সংজ্ঞায়িত কৰা নহয়)।

//*উপসংহাৰ:
//ডাৰ্টত ইণ্টাৰফেইচ হৈছে এক অত্যন্ত শক্তিশালী বৈশিষ্ট্য যাৰ মাধ্যমে আপুনি ক্লাছৰ আচৰণৰ বাবে চুক্তি (contract) বা পৰিসৰ নিৰ্ধাৰণ কৰিব পাৰে। ইণ্টাৰফেইচ একাধিক ক্লাছৰ মাজত একে ধৰণৰ মেথডসমূহৰ আদান-প্ৰদান সহজ কৰে আৰু কোডৰ পুনঃব্যৱহাৰ, পৰিসৰৰ নিয়ন্ত্ৰণ আৰু কাঠামো স্পষ্টীকৰণৰ ক্ষেত্ৰত সহায় কৰে।

