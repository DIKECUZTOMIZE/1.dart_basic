// ডাৰ্টত **ৰানটাইম পলিমৰফিজম (Runtime Polymorphism)** হৈছে এক প্ৰকাৰৰ পলিমৰফিজম, য’ত একে মেথড বা ফাংশন বিভিন্ন অবজেক্টৰ দ্বাৰা বিভিন্ন ৰূপত কাৰ্যকৰী হয়। এই প্ৰক্ৰিয়াৰ মূল বৈশিষ্ট্য হৈছে যে, কোন মেথড বা ফাংশনটোৱে কোন আচৰণ কৰিব (কোন ক্লাছৰ মেথডে কিমান বিশেষ আচৰণ কৰিব) সেয়া ৰানটাইমত সিদ্ধান্ত লৈ হয়। এইধৰণৰ পলিমৰফিজম **ইনহেৰিটেন্স (Inheritance)** আৰু **অভিসূচী (Overriding)**ৰ মাধ্যমে সাধিত হয়।
//
// ### ৰানটাইম পলিমৰফিজমৰ ব্যাখ্যা
//
// ৰানটাইম পলিমৰফিজমৰ ক্ষেত্ৰত, ডাৰ্টৰ ক্লাছৰ মেথডবোৰ একে নামৰ মেথড হলেও, যেতিয়া সেয়া বাচল হৈ চলে (একেদৰে একাধিক ক্লাছৰ অবজেক্টৰ পৰা), তেতিয়া সেই মেথডে ভিন্ন আচৰণ প্ৰকাশ কৰে।
//
// এটি বিশেষ দিশ হৈছে যে, ৰানটাইমত কোন মেথডে কি আচৰণ কৰিব, সেয়া আগত থকাবোৰৰ পৰা পূৰ্বাভাস নোৱাৰি, বাচল অবজেক্টৰ প্ৰকাৰৰ ওপৰত নিৰ্ভৰ কৰে।
//
// ### ৰানটাইম পলিমৰফিজমৰ উদাহৰণ
//
// ধৰক, তুমি এক বেছিক্লাছ `Shape` লৈছা আৰু তাৰ পৰা বিভিন্ন আকাৰৰ (যেনে, `Circle`, `Rectangle`) ক্লাছ ইনহেৰিট কৰা। এতিয়া, তুমি একে মেথডৰ দ্বাৰা সেয়া বিভিন্ন আচৰণৰ দ্বাৰা পৰিচালনা কৰিব পাৰা।
//

// // Shape নামৰ বেছিক্লাছ
// class Shape {
// void draw() {
// print("Drawing a shape");
// }
// }
//
// // Circle ক্লাছ যি Shape ৰ পৰা ইনহেৰিট কৰিছে
// class Circle extends Shape {
// @override
// void draw() {
// print("Drawing a circle");
// }
// }
//
// // Rectangle ক্লাছ যি Shape ৰ পৰা ইনহেৰিট কৰিছে
// class Rectangle extends Shape {
// @override
// void draw() {
// print("Drawing a rectangle");
// }
// }
//
// void main() {
// // Shape ৰ ৰেফাৰেঞ্চৰ পৰা Circle অবজেক্ট
// Shape shape1 = Circle();  // ৰানটাইমত Circle ৰ মেথড ক’লড হবে
//
// // Shape ৰ ৰেফাৰেঞ্চৰ পৰা Rectangle অবজেক্ট
// Shape shape2 = Rectangle();  // ৰানটাইমত Rectangle ৰ মেথড ক’লড হবে
//
// shape1.draw();  // আউটপুটঃ Drawing a circle
// shape2.draw();  // আউটপুটঃ Drawing a rectangle
// }
// ```
//
// ### ব্যাখ্যা:
// - `Shape` নামৰ বেছিক্লাছৰ `draw()` মেথড হৈছে। এই মেথডৰ আচৰণ সাধাৰণকৈ সকলো আকাৰৰ ক্ষেত্ৰত একে হব পাৰে।
// - `Circle` আৰু `Rectangle` ক্লাছসমূহে `Shape` ক্লাছৰ পৰা ইনহেৰিট কৰিছে আৰু `draw()` মেথডক অভিসূচী (Override) কৰিছে, যাতে তাৰ আচৰণ সেই ক্লাছৰ বাবে ভিন্ন হয়।
// - `main()` মেথডত, আমি `Shape` ৰ ৰেফাৰেঞ্চৰ পৰা `Circle` আৰু `Rectangle` অবজেক্ট সৃষ্টি কৰিছো।
// - যদিও আমি `Shape` টাইপৰ ৰেফাৰেঞ্চ ব্যৱহাৰ কৰিছো, ৰানটাইমত ডাৰ্টে সেই ৰেফাৰেঞ্চৰ পৰা কোন মেথড ক’লড কৰিব সেয়া নির্ধাৰণ কৰে। ফলস্বৰূপ, `Circle` ৰ মেথড `Drawing a circle` আৰু `Rectangle` ৰ মেথড `Drawing a rectangle` ক’লড হয়।
//
//* ### ৰানটাইম পলিমৰফিজমৰ বিশেষত্ব
//* 1. **মেথড অভিসূচী (Method Overriding)**: ক্লাছৰ ভিতৰত মেথড অভিসূচী কৰি, বিভিন্ন আচৰণ সৃষ্টিৰ মাধ্যমে ৰানটাইম পলিমৰফিজম অর্জন কৰা হয়।
//* 2. **ইনহেৰিটেন্স (Inheritance)**: পলিমৰফিজম সাধাৰণতে ইনহেৰিটেন্সৰ মাধ্যমে হয়। একে ক্লাছৰ অবজেক্ট বিভিন্ন আচৰণ প্ৰদান কৰাৰ কাৰণ হৈছে যে, সেই ক্লাছৰ মেথডটো অভিসূচী (Override) কৰা হৈছে।
//* 3. **ৰানটাইম বাছনি (Runtime Decision)**: যেতিয়া কোড চালনা হয়, তেতিয়া কোন মেথড সঠিক ৰূপত কাৰ্যকৰী হব সেই সিদ্ধান্ত ৰানটাইমত গ্ৰহণ কৰা হয়।
//
// ### ৰানটাইম পলিমৰফিজমৰ লাভ
//
// - **নমনীয়তা (Flexibility)**: ৰানটাইম পলিমৰফিজম ব্যৱহাৰ কৰি, আপোনাৰ কোড অধিক নমনীয় আৰু প্ৰৱন্ধযোগ্য (maintainable) হয়। একে নামৰ মেথড ব্যৱহাৰ কৰি বিভিন্ন আচৰণ অতিক্ৰম কৰিব পাৰি।
// - **সহজ পাৰদৰ্শিতা (Easy Extensibility)**: নতুন আচৰণ বা নতুন ক্লাছ যোগ কৰাৰ সময়, তোমাক সেয়ে নিৰ্দিষ্ট মেথডটো অভিসূচী কৰি নতুন আচৰণ প্রদান কৰিব পাৰা।
// - **কোড ৰিডাবিলিটি (Code Readability)**: একে নামৰ মেথড ব্যৱহাৰ কৰি কোড অধিক বুজিবলৈ সহজ হয়। বাচল ক্লাছৰ আকাৰৰ বিষয়ে চিন্তা নকৰাকৈ মেথডৰ আচৰণ সঠিকভাবে কাম কৰিব পাৰে।
//
// ### ৰানটাইম পলিমৰফিজম আৰু অন্যান্য পলিমৰফিজমৰ তুলনা
//
// ডাৰ্টত পলিমৰফিজমৰ দুই প্ৰকাৰ থাকে:
//
// 1. **কম্পাইল টাইম পলিমৰফিজম (Compile-Time Polymorphism)**: এইধৰণৰ পলিমৰফিজমে পদ্ধতি মুঠতে একে হয়। অৰ্থাৎ, একে মেথডৰ উপরকৈ ভিন্ন আচৰণ ব্যৱহাৰ কৰা হয় মাত্ৰ কম্পাইল টাইমত। এই পদ্ধতিটো সাধাৰণতে **Method Overloading**ৰ মাধ্যমে হয়, যি ডাৰ্টত সম্ভৱ নহয়।
//
// 2. **ৰানটাইম পলিমৰফিজম (Runtime Polymorphism)**: ই একে মেথডৰ ভিতৰত ভিন্ন আচৰণ প্ৰদৰ্শিত কৰা হয়, যাৰ নিৰ্ণয় ৰানটাইমত হয়। এই পদ্ধতি **Method Overriding**ৰ মাধ্যমে সম্পন্ন হয়।
//
// ডাৰ্টত, ৰানটাইম পলিমৰফিজম **মেথড অভিসূচী (Method Overriding)**ৰ দ্বাৰা সম্পন্ন হয় আৰু ই ইনহেৰিটেন্সৰ লগত মিশ্ৰিত হয়।
//
// ### সাৰাংশ
//
// - **ৰানটাইম পলিমৰফিজম** হৈছে এক প্ৰকাৰৰ পলিমৰফিজম, য’ত একে মেথড ভিন্ন আচৰণ প্ৰদৰ্শন কৰে, সেয়া ৰানটাইমত নিৰ্ধাৰিত হয়।
// - **Method Overriding** আৰু **Inheritance**ৰ মাধ্যমে পলিমৰফিজম সম্পন্ন হয়।
// - ৰানটাইম পলিমৰফিজমে কোডৰ নমনীয়তা, সহজ পাৰদৰ্শিতা আৰু বুজিবলৈ সুবিধা প্ৰদান কৰে।
//
// এইদৰে, ডাৰ্টৰ ৰানটাইম পলিমৰফিজম আপোনাৰ কোডক অধিক শক্তিশালী আৰু সুবিধাজনক কৰি তোলে, যাৰ মাধ্যমে একে মেথড ভিন্ন ভিন্ন আচৰণৰ পৰা কাম কৰি থাকে।