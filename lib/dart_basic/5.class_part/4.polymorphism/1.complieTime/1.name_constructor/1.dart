// ডাৰ্টত **পলিমৰ্ফিজম (Polymorphism)** আৰু **নামক সঁজুলি কনষ্ট্ৰাক্টৰ (Named Constructors)** দুয়োটা একে সময়ত খুব গুৰুত্বপূর্ণ বৈশিষ্ট্য। এই বিষয়বোৰ সম্বন্ধে বোৰ সপক্ষে গভীৰভাবে বুজাইছোঁ।
//
// ### ১. **পলিমৰ্ফিজম (Polymorphism) - পলিমৰ্ফিজমৰ সংজ্ঞা**
//
// পলিমৰ্ফিজম হল এক তত্ত্ব যাৰ অৰ্থ হৈছে একে নামৰ পৰা ভিন্ন ভিন্ন আচৰণ বা কার্যৰ সৃষ্টি। সেয়া সাধাৰণতঃ একে বৰ্গ (class) বা মেথডৰে একাধিক ৰূপ প্ৰদান কৰে। ডাৰ্টৰ পলিমৰ্ফিজমৰ দ্বাৰা, একে মেথড বা ক্লাছৰ বিভিন্ন আচৰণ আৰু প্ৰতিক্ৰিয়া প্ৰকাশ কৰিব পাৰি।
//
// ### পলিমৰ্ফিজমৰ উদাহৰণ:
// ডাৰ্টত পলিমৰ্ফিজম সাধাৰণতে **ইনহেৰিটেন্স (Inheritance)** আৰু **অভিসূচী (Overriding)**ৰ সহায়ত ব্যৱহৃত হয়। মেইন পৰিসৰে আৰু সাবক্লাচৰ মেথডসমূহৰ দ্বাৰা একে নামৰ মেথড পৃথক পৃথক আচৰণ প্ৰদৰ্শন কৰিব পাৰে।
//
// **উদাহৰণ:**
// ```dart
// // বেছিক্লাছ Animal
// class Animal {
// void sound() {
// print("Animal makes a sound");
// }
// }
//
// // সাৰ্বজনীন কেঞ্চি (Subclass)
// class Dog extends Animal {
// @override
// void sound() {
// print("Dog barks");
// }
// }
//
// class Cat extends Animal {
// @override
// void sound() {
// print("Cat meows");
// }
// }
//
// void main() {
// Animal animal1 = Dog();  // পলিমৰ্ফিজমৰ উদাহৰণ
// animal1.sound();  // আউটপুটঃ Dog barks
//
// Animal animal2 = Cat();  // পলিমৰ্ফিজমৰ উদাহৰণ
// animal2.sound();  // আউটপুটঃ Cat meows
// }
// ```
// **ব্যাখ্যা:**
// - এখানে `Dog` আৰু `Cat` ক্লাছসমূহে `Animal` ক্লাছৰ পৰা ইনহেৰিট কৰিছে।
// - `sound()` মেথডটো `Animal` ক্লাছত ঘোষণা কৰা হৈছে, কিন্তু `Dog` আৰু `Cat` ক্লাছসমূহে এই মেথডটোৰ আচৰণক অধিক নিৰ্দিষ্ট ৰূপে পৰিবৰ্তন কৰিছে (অর্থাৎ "বাৰ্ক" আৰু "মিও" কাৰ্যৰূপে)।
// - এই পদ্ধতি সম্পৰ্কে `polymorphism`ৰ পূৰ্ণ উদাহৰণ।
//
// ### ২. **নামক সঁজুলি কনষ্ট্ৰাক্টৰ (Named Constructors) - কিয় আৰু কেনে ব্যৱহাৰ কৰা হয়**
//
// ডাৰ্টত **নামক সঁজুলি কনষ্ট্ৰাক্টৰ** (Named Constructors) ক্লাছৰ ভিতৰত একাধিক কনষ্ট্ৰাক্টৰ নিৰ্ধাৰণ কৰাৰ উপায়। কনষ্ট্ৰাক্টৰবোৰ নাম দিয়াৰ মাধ্যমে যিকোনো ক্লাছৰ ভিন্ন ভিন্ন অৱস্থা (state) বা আচৰণ নিৰ্ধাৰণ কৰিব পাৰি।
//
// **নামক সঁজুলি কনষ্ট্ৰাক্টৰ** ব্যৱহাৰ কৰাটো এটা সুবিধা, যাৰ দ্বাৰা একে ক্লাছৰ ভিতৰত একাধিক কনষ্ট্ৰাক্টৰ সংজ্ঞায়িত কৰিব পৰা যায়, যেনে একে ক্লাছৰ ভিতৰত বিভিন্ন অৱস্থা বা পৰিসৰে অবজেক্ট সৃষ্টি কৰিব পাৰি।
//
// ### নামক সঁজুলি কনষ্ট্ৰাক্টৰৰ উদাহৰণ:
// ```dart
// class Person {
// String name;
// int age;
//
// // সাধাৰণ কনষ্ট্ৰাক্টৰ
// Person(this.name, this.age);
//
// // নামক সঁজুলি কনষ্ট্ৰাক্টৰ
// Person.guest() : name = 'Guest', age = 0;
//
// // নামক সঁজুলি কনষ্ট্ৰাক্টৰ
// Person.admin() : name = 'Admin', age = 30;
// }
//
// void main() {
// // সাধাৰণ কনষ্ট্ৰাক্টৰ ব্যৱহাৰ
// var person1 = Person('John', 25);
// print('Name: ${person1.name}, Age: ${person1.age}');
//
// // নামক সঁজুলি কনষ্ট্ৰাক্টৰ ব্যৱহাৰ
// var person2 = Person.guest();
// print('Name: ${person2.name}, Age: ${person2.age}');
//
// // নামক সঁজুলি কনষ্ট্ৰাক্টৰ ব্যৱহাৰ
// var person3 = Person.admin();
// print('Name: ${person3.name}, Age: ${person3.age}');
// }
// ```
//
// **ব্যাখ্যা:**
// - এই উদাহৰণত, `Person` ক্লাছৰ ভিতৰত তিনিটা কনষ্ট্ৰাক্টৰ আছে: এক সাধাৰণ কনষ্ট্ৰাক্টৰ আৰু দুটা নামক সঁজুলি কনষ্ট্ৰাক্টৰ।
// - `Person.guest()` আৰু `Person.admin()` নামক সঁজুলি কনষ্ট্ৰাক্টৰবোৰে বিভিন্ন ধরনের অৱস্থাত `Person` অবজেক্ট সৃষ্টি কৰে।
// - এই পদ্ধতিত, একে ক্লাছৰ ভিতৰত একাধিক কনষ্ট্ৰাক্টৰ প্ৰয়োজনীয় অৱস্থা অনুসৰি অবজেক্ট সৃষ্টি কৰাৰ সুবিধা দিয়ে।
//
// ### ৩. **পলিমৰ্ফিজম আৰু নামক সঁজুলি কনষ্ট্ৰাক্টৰ একে সময়ত ব্যৱহাৰ**
// ডাৰ্টত পলিমৰ্ফিজম আৰু নামক সঁজুলি কনষ্ট্ৰাক্টৰ একে সময়ত ব্যবহৃত হ'ব পাৰে। উদাহৰণস্বৰূপ, বিভিন্ন ধৰণৰ অবজেক্ট বা অবস্থা সৃষ্টিৰ সময় পলিমৰ্ফিজমৰ সহায়ত, একে কনষ্ট্ৰাক্টৰৰ বিভিন্ন ৰূপ বা আচৰণ প্ৰদান কৰা যায়।
//
// **উদাহৰণ:**
// ```dart
// class Shape {
// void draw() {
// print("Drawing a shape");
// }
// }
//
// class Circle extends Shape {
// @override
// void draw() {
// print("Drawing a circle");
// }
// }
//
// class Rectangle extends Shape {
// @override
// void draw() {
// print("Drawing a rectangle");
// }
// }
//
// void main() {
// Shape circle = Circle();  // পলিমৰ্ফিজম ব্যৱহাৰ
// Shape rectangle = Rectangle();  // পলিমৰ্ফিজম ব্যৱহাৰ
//
// circle.draw();  // আউটপুটঃ Drawing a circle
// rectangle.draw();  // আউটপুটঃ Drawing a rectangle
// }
// ```
//
// এতিয়া যদি তুমি এই উদাহৰণৰ সৈতে নামক সঁজুলি কনষ্ট্ৰাক্টৰ যোগ কৰা চাওঁ:
// ```dart
// class Shape {
// String type;
// Shape(this.type);
// Shape.circle() : type = 'Circle';
// Shape.rectangle() : type = 'Rectangle';
//
// void draw() {
// print("Drawing a $type");
// }
// }
//
// void main() {
// Shape shape1 = Shape.circle();  // নামক সঁজুলি কনষ্ট্ৰাক্টৰ
// Shape shape2 = Shape.rectangle();  // নামক সঁজুলি কনষ্ট্ৰাক্টৰ
//
// shape1.draw();  // আউটপুটঃ Drawing a Circle
// shape2.draw();  // আউটপুটঃ Drawing a Rectangle
// }
// ```
//
// **সংক্ষেপে:**
// - **পলিমৰ্ফিজম** ক্লাছসমূহৰ ইনহেৰিটেন্স আৰু অভিসূচী পদ্ধতিৰ দ্বাৰা একে মেথডৰ ভিন্ন ভিন্ন আচৰণ প্ৰদৰ্শন কৰে।
// - **নামক সঁজুলি কনষ্ট্ৰাক্টৰ** একাধিক কনষ্ট্ৰাক্টৰ সংজ্ঞা প্ৰদান কৰে যাতে একে ক্লাছৰ পৰা ভিন্ন ধৰণৰ অবজেক্ট সৃষ্টি কৰিব পৰা যায়।
// - দুইটাৰ মিলনে ক্লাছৰ আচৰণ আৰু অবস্থা সৃষ্টিত অধিক নমনীয়তা আৰু সুবিধা প্ৰদান কৰে।
//
// এনে কৰিবলে, তুমি ডাৰ্টৰ পলিমৰ্ফিজম আৰু নামক সঁজুলি কনষ্ট্ৰাক্টৰ দ্ৱাৰা শক্তিশালী আৰু নমনীয় কোড লিখিব পাৰিব।