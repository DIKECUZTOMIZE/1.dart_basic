//ডাৰ্ট (Dart) ত **পলিমৰফিজম (Polymorphism)** আৰু **ডিফল্ট কনষ্ট্ৰাক্টৰ (Default Constructor)** বোৰ দুটা গুৰুত্বপূর্ণ বৈশিষ্ট্য, যিবোৰ একে সময়ত আপোনাৰ কোডৰ নমনীয়তা আৰু প্ৰযুক্তি উন্নয়ন কৰাত সহায় কৰে। ইয়াৰ বিষয়ে অসমীয়াত বিস্তারিতভাবে ব্যাখ্যা কৰিম।
//
//*### ১. **পলিমৰফিজম (Polymorphism)**
//
//পলিমৰফিজম হৈছে এক পৰিভাষা যাৰ অৰ্থ হৈছে "বহু ৰূপ" বা "একেই নামৰ পৰা ভিন্ন আচৰণ"। ডাৰ্টত পলিমৰফিজম সাধাৰণতে **ইনহেৰিটেন্স (Inheritance)** আৰু **অভিসূচী (Overriding)**ৰ দ্বাৰা আয়ত্ত কৰা হয়।
//
//পলিমৰফিজমৰ দ্বাৰা, একে ক্লাছৰ অবজেক্ট বা একে মেথডৰ বিভিন্ন আচৰণ প্ৰতিষ্ঠিত হয়, যাৰ দ্বাৰা একে কোডৰ অংশৰ পৰা বাচল হোৱা সৰ্বাধিক অপচয়।
//
//#### পলিমৰফিজমৰ উদাহৰণ
//ধৰো তোমাৰ এখন `Shape` নামৰ বেছিক্লাছ আছে, আৰু তাত বিভিন্ন ৰাসায়নিক আকাৰৰ ক্লাছৰ (যেনে, `Circle`, `Rectangle`) অধীনত পলিমৰফিজমৰ মাধ্যমে সেই আকাৰৰ বিচাৰ কৰা হয়।
//
//```dart
//// বেছিক্লাছ Shape
//class Shape {
//void draw() {
//print("Drawing a shape");
//}
//}
//
//// Circle ক্লাছ
//class Circle extends Shape {
//@override
//void draw() {
//print("Drawing a circle");
//}
//}
//
//// Rectangle ক্লাছ
//class Rectangle extends Shape {
//@override
//void draw() {
//print("Drawing a rectangle");
//}
//}
//
//void main() {
//Shape shape1 = Circle();  // পলিমৰফিজম
//Shape shape2 = Rectangle();  // পলিমৰফিজম
//
//shape1.draw();  // আউটপুটঃ Drawing a circle
//shape2.draw();  // আউটপুটঃ Drawing a rectangle
//}
//```
//
//**ব্যাখ্যা:**
//- `Shape` ক্লাছটোৰ `draw()` মেথডত সাধাৰণ আকাৰ আঁকিবলৈ কোড আছে।
//- `Circle` আৰু `Rectangle` ক্লাছসমূহে `Shape` ক্লাছৰ পৰা ইনহেৰিট কৰিছে আৰু তেওঁলোকৰ `draw()` মেথডটোকে অভিসূচী কৰিছে (Override)।
//- পলিমৰফিজমৰ দ্বাৰা `Shape` ক্লাছৰ ৰেফাৰেঞ্চ ব্যৱহাৰ কৰি `Circle` আৰু `Rectangle` ক্লাছৰ মেথডবোৰ ভিন্নভাবে কাৰ্যকৰী হৈছে। সেয়া হৈছে পলিমৰফিজমৰ উদাহৰণ।
//
//*### ২. **ডিফল্ট কনষ্ট্ৰাক্টৰ (Default Constructor)**
//
//ডিফল্ট কনষ্ট্ৰাক্টৰ হৈছে এক বিশেষ প্ৰকাৰৰ কনষ্ট্ৰাক্টৰ, যি কোনো কনষ্ট্ৰাক্টৰ মেথডৰ পৰা স্পষ্টভাবে উল্লেখ কৰা নাছিল। যদি ক্লাছৰ ভিতৰত কোনো কনষ্ট্ৰাক্টৰ ডিফাইন কৰা নহয়, তেন্তে ডাৰ্টে আপোনাৰ ক্লাছৰ বাবে এক ডিফল্ট কনষ্ট্ৰাক্টৰ সৃষ্টিৰ বাবে চেষ্টা কৰে।
//
//**ডিফল্ট কনষ্ট্ৰাক্টৰ** সাধাৰণতে এক পৰিসৰ ব্যৱহাৰ কৰি, আপোনাৰ ক্লাছৰ নতুন অবজেক্ট সৃষ্টি কৰে আৰু কোনো পৰিসৰ প্ৰদান নকৰিলে, তেওঁলোকৰ মান নিৰ্ধাৰণ কৰে। যদি ক্লাছৰ ভিতৰত কোনো কনষ্ট্ৰাক্টৰ স্পষ্টভাৱে নিদিষ্ট নথকা, তেন্তে ডিফল্ট কনষ্ট্ৰাক্টৰ কাম কৰিব।
//
//#### ডিফল্ট কনষ্ট্ৰাক্টৰৰ উদাহৰণ
//```dart
//class Person {
//String name;
//int age;
//
//// ডিফল্ট কনষ্ট্ৰাক্টৰ
//Person() {
//name = 'Unknown';  // ডিফল্ট মান
//age = 0;           // ডিফল্ট মান
//}
//
//// কনষ্ট্ৰাক্টৰ মেথড
//Person.withDetails(this.name, this.age);
//
//void displayInfo() {
//print('Name: $name, Age: $age');
//}
//}
//
//void main() {
//var person1 = Person();  // ডিফল্ট কনষ্ট্ৰাক্টৰ ব্যৱহাৰ
//person1.displayInfo();   // আউটপুটঃ Name: Unknown, Age: 0
//
//var person2 = Person.withDetails('Alice', 30);  // বিশেষ কনষ্ট্ৰাক্টৰ
//person2.displayInfo();   // আউটপুটঃ Name: Alice, Age: 30
//}
//```
//
//**ব্যাখ্যা:**
//- `Person` ক্লাছত `Person()` নামৰ ডিফল্ট কনষ্ট্ৰাক্টৰ আছে, য’ত নাম আৰু বয়সৰ ডিফল্ট মান দিয়াৰ ব্যৱস্থা কৰা হৈছে।
//- দ্বিতীয় কনষ্ট্ৰাক্টৰ `Person.withDetails()` ত, নাম আৰু বয়সৰ মানৰ সৈতে অবজেক্ট সৃষ্টি কৰা হৈছে।
//- প্ৰথম অৱস্থাত ডিফল্ট কনষ্ট্ৰাক্টৰ ব্যৱহাৰ কৰাত, নাম `'Unknown'` আৰু বয়স `0` হিচাপে দেখাইছে। দ্বিতীয় মেথডে বিশেষ মান দিয়া হৈছে।
//
//### ৩. **পলিমৰফিজম আৰু ডিফল্ট কনষ্ট্ৰাক্টৰ একে সময়ত ব্যৱহাৰ**
//
//পলিমৰফিজম আৰু ডিফল্ট কনষ্ট্ৰাক্টৰ একে সময়ত একে কোডৰ অংশত ব্যৱহাৰ কৰিব পৰা যায়। উদাহৰণস্বৰূপ, যদি তুমি একাধিক ক্লাছৰ মধ্যে পলিমৰফিজমৰ সহায়ত ভিন্ন আচৰণ কৰিবৰ পৰা থাকো, আৰু ক্লাছসমূহৰ ভিতৰত ডিফল্ট কনষ্ট্ৰাক্টৰ থাকিব পাৰে, তেন্তে কোডটো অধিক নমনীয় আৰু সৰল হব।
//
//**উদাহৰণ:**
//```dart
//class Animal {
//String name;
//
//// ডিফল্ট কনষ্ট্ৰাক্টৰ
//Animal() {
//name = 'Animal';  // ডিফল্ট মান
//}
//
//void makeSound() {
//print('$name makes a sound');
//}
//}
//
//class Dog extends Animal {
//Dog() {
//name = 'Dog';  // ডিফল্ট কনষ্ট্ৰাক্টৰ
//}
//
//@override
//void makeSound() {
//print('$name barks');
//}
//}
//
//class Cat extends Animal {
//Cat() {
//name = 'Cat';  // ডিফল্ট কনষ্ট্ৰাক্টৰ
//}
//
//@override
//void makeSound() {
//print('$name meows');
//}
//}
//
//void main() {
//Animal dog = Dog();  // পলিমৰফিজম আৰু ডিফল্ট কনষ্ট্ৰাক্টৰ
//Animal cat = Cat();  // পলিমৰফিজম আৰু ডিফল্ট কনষ্ট্ৰাক্টৰ
//
//dog.makeSound();  // আউটপুটঃ Dog barks
//cat.makeSound();  // আউটপুটঃ Cat meows
//}
//```
//
//**ব্যাখ্যা:**
//- `Animal` ক্লাছৰ ডিফল্ট কনষ্ট্ৰাক্টৰ আছে যাৰ দ্বাৰা `name` পৰিসৰৰ মান `'Animal'` দিয়াৰ ব্যৱস্থা কৰা হৈছে।
//- `Dog` আৰু `Cat` ক্লাছসমূহে `Animal` ক্লাছৰ পৰা ইনহেৰিট কৰি, তাদেরৰ নিজস্ব ডিফল্ট কনষ্ট্ৰাক্টৰ থাকে, যাৰ দ্বাৰা ক্লাছৰ `name` পৰিসৰ `Dog` আৰু `Cat` হিচাপে নিৰ্ধাৰিত হয়।
//- পলিমৰফিজমৰ মাধ্যমে একে মেথড (`makeSound()`) ভিন্ন ভিন্ন ক্লাছৰ পৰা ব্যৱহৃত হৈছে।
//
//### সাৰাংশ:
//1. **পলিমৰফিজম** ডাৰ্টত একে নামৰ মেথড বা ফাংশনৰ দ্বাৰা বিভিন্ন আচৰণক অনুমতি দিয়ে। একে ক্লাছৰ ভিতৰত মেথডৰ অভিসূচী কৰা হয়, আৰু এটি ক্লাছৰ ৰেফাৰেঞ্চৰ পৰা ভিন্ন আচৰণ প্ৰদৰ্শিত হয়।
//2. **ডিফল্ট কনষ্ট্ৰাক্টৰ** হৈছে এক বিশেষ কনষ্ট্ৰাক্টৰ, যি কোনো পৰিসৰ বা মান প্ৰকাশ নকৰাকৈ ক্লাছৰ অবজেক্ট সৃষ্টি কৰে। ডিফল্ট মান প্ৰদান কৰি ক্লাছৰ নতুন অবজেক্ট সৃষ্টি কৰা হয়।
//3. এই দুটি বৈশিষ্ট্য একে সময়ত ব্যৱহৃত হ'লে কোড অধিক নমনীয় আৰু সুবিধাজনক হয়।
//
//এই দুইটি বৈশিষ্ট্যৰ সহায়ত ডাৰ্টত শক্তিশালী আৰু ফ্লেক্সিবল (Flexible) ক্লাছ আৰু অবজেক্ট মডেল সৃষ্টি কৰিব পাৰি।