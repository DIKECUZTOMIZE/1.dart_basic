//*ডাৰ্ট (Dart) ভাষাত Polymorphism (পলিমৰফিজম) হৈছে এক মৌলিক বৈশিষ্ট্য, যাৰ মাধ্যমে একে নামৰ মেথড বা গুণাবলী (properties) বিভিন্ন ধৰণে আচৰণ কৰিব পাৰে। সহজ ভাষাত, পলিমৰফিজম মানে হৈছে “বহু ৰূপ।” এই বৈশিষ্ট্যৰ মাধ্যমে, একে মেথড বা ফাংশন বিভিন্ন ক্লাছত বিভিন্ন আচৰণ কৰিব পাৰে। পলিমৰফিজমৰ দ্বাৰা একে ইণ্টাৰফেইচ বা মেথডে বিভিন্ন অবজেক্টৰ উপৰিতৃপ্তি পূৰ্ণ কৰিব পাৰে।

//*1. Polymorphism কি?
//পলিমৰফিজম হৈছে এক প্ৰক্ৰিয়া য'ত একে মেথড বা ফাংশন বিভিন্ন প্ৰকাৰৰ ক্লাছ বা অবজেক্টৰ পৰা বিভিন্নভাবে আচৰণ কৰে। বিশেষকৈ, পলিমৰফিজমে একে মেথড বা গুণাবলী একাধিক ক্লাছৰ পৰা ভিন্ন আচৰণ প্ৰদান কৰে।

//ডাৰ্টত পলিমৰফিজমৰ দুটি মুখ্য ধৰণ থাকে:

//Compile-time Polymorphism (Method Overloading)
//Runtime Polymorphism (Method Overriding)

//*তলত এই দুখন ধৰণৰ পলিমৰফিজমৰ বিষয়ে বিস্তাৰিত বৰ্ণনা দিয়া হৈছে।

//*2. Compile-time Polymorphism (Method Overloading)
//Compile-time polymorphism বা Method Overloading হৈছে এক পৰিস্থিতি য'ত একে নামৰ মেথড বা ফাংশন একে ক্লাছৰ ভিতৰত বিভিন্ন পৰামিতি (parameters)ৰ সৈতে সংজ্ঞায়িত কৰা হয়। এই পৰিসৰটোৰ মাধ্যমে, আপুনি একে মেথডৰ বিভিন্ন ৰূপ সৃষ্টি কৰিব পাৰে।

//ডাৰ্টত Method Overloading সমৰ্থিত নহয়, অৰ্থাৎ আপুনি একে মেথডৰ নামৰ সৈতে একাধিক পৰামিতি ডিফাইন কৰিব পৰা নাযায়। তেন্তে, ডাৰ্টত পলিমৰফিজম সাধাৰণতে Method Overridingৰ মাধ্যমে প্ৰয়োগ কৰা হয়।



//*3. Runtime Polymorphism (Method Overriding)
//Runtime polymorphism বা Method Overriding হৈছে সেই ধৰণৰ পলিমৰফিজম, য'ত একে নামৰ মেথডৰ বাস্তৱায়ন (implementation) বেছি একাধিক ক্লাছত থাকে। এই প্ৰক্ৰিয়াত, একে মেথডৰ আচৰণ কিছুমান ক্লাছত পৃথক পৃথক ৰূপে পৰিণত হয়।
//
//ডাৰ্টত method overridingৰ মাধ্যমে পলিমৰফিজম সৰলভাবে কার্যকৰী হয়। একে মেথডৰ নামৰ পৰা, বেছিক্লাছৰ (base class) মেথডবোৰ সপৰ্যায়ীক (derived class) ক্লাছৰ ভিতৰত পুনৰ পূৰ্ণ বাস্তৱায়িত (override) কৰা হয়। ইয়াৰ ফলত, একে নামৰ মেথড বিভিন্ন ক্লাছত বিভিন্ন আচৰণ কৰা দেখা যায়।
//
//উদাহৰণৰ সহায়ত বুজা:
//ধৰোঁ, আমাৰ দুইটা ক্লাছ আছে: Animal আৰু Dog, য'ত Animal ক্লাছৰ speak() মেথড আছে আৰু Dog ক্লাছ সেই মেথডটোৰ নতুন বাস্তৱায়ন দিব।
//

//// Animal ক্লাছ
//class Animal {
//// এটা সাধাৰণ মেথড, যি সকল বাচল ক্লাছৰ পৰা পুনৰ বাস্তৱায়িত কৰিব লাগিব
//void speak() {
//print("Animal speaks");
//}
//}
//

//// Dog ক্লাছ যি Animal ক্লাছৰ মেথডক পুনৰ বাস্তৱায়ন কৰিছে
//class Dog extends Animal {
//@override
//void speak() {
//print("Dog barks");
//}
//}
//

//// Cat ক্লাছ যি Animal ক্লাছৰ মেথডক পুনৰ বাস্তৱায়ন কৰিছে
//class Cat extends Animal {
//@override
//void speak() {
//print("Cat meows");
//}
//}
//

//void main() {
//// Animal ক্লাছৰ অবজেক্ট সৃষ্টি
//Animal animal = Animal();
//animal.speak(); // Animal speaks
//

//// Dog ক্লাছৰ অবজেক্ট সৃষ্টি
//Animal dog = Dog(); // Polymorphism
//dog.speak();  // Dog barks
//

//// Cat ক্লাছৰ অবজেক্ট সৃষ্টি
//Animal cat = Cat(); // Polymorphism
//cat.speak(); // Cat meows
//}

//ব্যাখ্যা:
//Animal ক্লাছ: এই ক্লাছত speak() মেথড আছে, যাৰ পৰা প্ৰতিটো বাচল ক্লাছ speak() মেথডক পুনৰ বাস্তৱায়ন কৰিব লাগে।
//Dog ক্লাছ: এই ক্লাছটো Animal ক্লাছৰ পৰা ইৰেজেট (inherit) কৰে আৰু speak() মেথডটোৰ নতুন বাস্তৱায়ন প্ৰদান কৰে, য'ত সেয়া “Dog barks” মুদ্রণ কৰে।
//Cat ক্লাছ: এই ক্লাছটোৰো speak() মেথডৰ নতুন বাস্তৱায়ন থাকে, য'ত সেয়া “Cat meows” মুদ্রণ কৰে।
//Main function:
//প্ৰথমে, Animal ক্লাছৰ পৰা অবজেক্ট সৃষ্টি কৰা হৈছে আৰু সেয়া speak() মেথড কল কৰিছে।
//পাছত, পলিমৰফিজমৰ মাধ্যমে Dog আৰু Cat ক্লাছৰ অবজেক্টসমূহ সৃষ্টি কৰি, Animal টাইপৰ ৰেফাৰেঞ্চে সেই ক্লাছৰ পদ্ধতি speak() কল কৰিছে। কিন্তু, যিহেতু Dog আৰু Cat ক্লাছসমূহে speak() মেথডটো পৃথকভাবে বাস্তৱায়িত কৰিছে, সেয়া নিজ নিজ আচৰণৰ অনুসৰি আউটপুট প্ৰদান কৰে।


//*4. Polymorphismৰ সুবিধাসমূহ:
//কোডৰ পুনঃব্যৱহাৰ (Code Reusability): একে মেথডৰ নাম বিভিন্ন ক্লাছত পুনৰ ব্যৱহাৰ কৰি, একে আচৰণক বিভিন্ন প্ৰকাৰত সঞ্চালন কৰা যায়।
//নতুন ক্লাছ যোগ কৰা সহজ: পলিমৰফিজমৰ মাধ্যমে, আপুনি নতুন ক্লাছ যোগ কৰি মেনে চলা আচৰণ পুনৰব্যৱহাৰ কৰিব পাৰে।
//ডাইনামিক আচৰণ (Dynamic Behavior): runtime-ত পৰিস্থিতি অনুসৰি ভিন্ন ভিন্ন ক্লাছৰ মেথডৰ আচৰণ একে সময়তে পৰিস্কৃত (dynamic)ভাৱে পৰিৱৰ্তিত হয়।



//*5. Polymorphismৰ সীমাবদ্ধতা:
//গতিৰ পৰা কিছু পৰিসীমা: runtime polymorphism, য'ত মেথড overriding কৰে, সেয়া কিছু পৰিমাণে গতিৰ ওপৰত প্ৰভাৱ পেলাব পাৰে।
//কম্পাইল টাইম চেকিং (Compile-time checking): কিছু পলিমৰফিজম প্ৰক্ৰিয়া (যেনে method overloading) ডাৰ্টত সমৰ্থিত নহয়, যাৰ ফলত কম্পাইল টাইমৰ সময়ত error বা সমস্যা হ'ব পাৰে।


//*উপসংহাৰ:
//ডাৰ্টত Polymorphism হৈছে এক অত্যন্ত শক্তিশালী বৈশিষ্ট্য, যাৰ মাধ্যমে আপুনি একে মেথড বা ফাংশন একাধিক ক্লাছৰ ভিতৰত বিভিন্ন আচৰণৰ সঞ্চালন কৰিব পাৰে। পলিমৰফিজম কোডৰ পুনঃব্যৱহাৰ বৃদ্ধি কৰে, নতুন ক্লাছসমূহ যোগ কৰাটো সৰল কৰে আৰু কোডৰ গঠন অধিক পৰিষ্কৃত আৰু মডুলাৰ (modular) কৰি তোলে।

