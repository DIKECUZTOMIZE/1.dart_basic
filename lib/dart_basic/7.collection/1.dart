//*ডাৰ্ট (Dart) ত **ক’লেকশ্যন (Collection)** হৈছে একধৰণৰ ডাটা স্ট্ৰাকচাৰ, য’ত একাধিক মান (value) সঞ্চিত থাকে। ক’লেকশ্যন ব্যৱহাৰ কৰাটো প্ৰোগ্ৰামিংত খুবেই উপকাৰী, কাৰণ ই আমাৰ বাবে একে ধৰণৰ মানসমূহ সঞ্চয়, প্ৰক্ৰিয়া, আৰু পৰিচালনা কৰাৰ সুবিধা দিয়ে। ডাৰ্টত, ক’লেকশ্যনৰ কেইটামান মূখ্য ধৰণ আছে, যেনে **List**, **Set**, আৰু **Map**। এই সকলোবোৰৰ বিশেষত্ব, উপকাৰিতা, আৰু ব্যৱহাৰ বিধি কিছুমান পৰিসৰে ব্যাখ্যা কৰিম।
//
//*### ১. **List (লিষ্ট)**
//
//ডাৰ্টত **List** হৈছে একধৰণৰ অর্ডাৰ কৰা ক’লেকশ্যন, য'ত একাধিক এলিমেণ্ট (items) সঞ্চিত থাকে। লিষ্টত সঞ্চিত এলিমেণ্টবোৰৰ **অর্ডাৰ (index)** থাকে, আৰু ই ডুপ্লিকেট মানসমূহ সন্মতি দিয়ে। লিষ্টৰ মূখ্য বৈশিষ্ট্য হৈছে সেয়া ইমিউটেবল বা মিউটেবল (mutables) হ'ব পাৰে আৰু সেয়াৰ মাধ্যৰে পৰিসৰে একে ধৰণৰ অথবা বিভিন্ন ধৰণৰ মান সঞ্চয় কৰিব পাৰি।
//
//#### উদাহৰণ:
//

//void main() {
//// মিউটেবল লিষ্ট
//List<int> numbers = [10, 20, 30, 40];
//
//// এলিমেণ্ট যোগ
//numbers.add(50);
//
//// এলিমেণ্ট মুছা
//numbers.remove(20);
//
//// এলিমেণ্টৰ মান আৰু ইণ্ডেক্স
//print(numbers); // আউটপুটঃ [10, 30, 40, 50]
//print(numbers[0]); // আউটপুটঃ 10
//}
//```
//
//*### List ৰ মূখ্য বৈশিষ্ট্যসমূহ:
//1. **অর্ডাৰ**: এলিমেণ্টবোৰৰ ভৰতিৰ অর্ডাৰ থাকে।
//2. **ডুপ্লিকেট মান**: লিষ্টত একে মান একাধিক বাৰ সঞ্চিত হ’ব পাৰে।
//3. **মিউটেবল আৰু ইমিউটেবল**: ডাৰ্টত লিষ্ট মিউটেবল (য'ত এলিমেণ্ট যোগ, মুছা বা সলনি কৰিব পাৰি) আৰু ইমিউটেবল (য'ত একে এলিমেণ্টৰ সলনি নকৰা হয়) দুয়ো হব পাৰে।
//
//#### মিউটেবল আৰু ইমিউটেবল লিষ্টৰ উদাহৰণ:

//// ইমিউটেবল লিষ্ট
//final List<int> numbers = [1, 2, 3];
//numbers.add(4); // Error: Cannot modify an unmodifiable list
//
//// মিউটেবল লিষ্ট
//List<int> mutableNumbers = [1, 2, 3];
//mutableNumbers.add(4); // সঠিক
//```
//
//*### ২. **Set (ছেট)**
//
//**Set** হৈছে এক অর্ডাৰবিহীন ক’লেকশ্যন, য’ত একে মান দুবাৰ সঞ্চিত হ'ব নোৱাৰে। অৰ্থাৎ, ছেটত **ডুপ্লিকেট মান** সঞ্চিত নকৰা হয়। এই সৰল নিয়মৰ বাবে ছেটত মানৰ অর্ডাৰ নিশ্চিত নহয়।
//
//#### উদাহৰণ:
//
//```dart
//void main() {
//// ছেট
//Set<String> fruits = {'apple', 'banana', 'orange', 'apple'};
//
//// ছেটৰ মান পৰীক্ষা
//print(fruits); // আউটপুটঃ {apple, banana, orange}
//}
//```
//
//*### Set ৰ মূখ্য বৈশিষ্ট্যসমূহ:
//1. **অর্ডাৰবিহীন**: মানৰ ইণ্ডেক্স বা অর্ডাৰ গাৰাণ্টী নহয়।
//2. **ডুপ্লিকেট বাদ দিয়া হয়**: একে মানৰ পুনৰাবৃত্তি হ’ব নোৱাৰি।
//3. **মিউটেবল আৰু ইমিউটেবল**: ছেটো মিউটেবল আৰু ইমিউটেবল হব পাৰে।
//
//*### ৩. **Map (ম্যাপ)**
//
//ডাৰ্টৰ **Map** হৈছে এক ক’লেকশ্যন য’ত **key-value pair**ৰ মাজত মান সঞ্চিত থাকে। ইয়াৰ মানবোৰৰ সঙ্গত সুনির্দিষ্ট **key** থাকে, যি একে সময়ত একপৰ্যায়ে প্ৰত্যেকটি মানৰ সৈতে জড়িত থাকে। ম্যাপত ডুপ্লিকেট key নথকা সত্ত্বেও একে keyৰ সৈতে একাধিক মান সঞ্চিত হ’ব পাৰে।
//
//#### উদাহৰণ:
//

//void main() {
//// ম্যাপ
//Map<String, int> studentGrades = {
//'John': 90,
//'Sara': 85,
//'Alex': 88,
//};
//
//// নতুন key-value যোগ কৰা
//studentGrades['Mike'] = 92;
//
//// key ৰ দ্বাৰা মান পৰীক্ষা
//print(studentGrades); // আউটপুটঃ {John: 90, Sara: 85, Alex: 88, Mike: 92}
//print(studentGrades['Sara']); // আউটপুটঃ 85
//}
//```
//
//### Map ৰ মূখ্য বৈশিষ্ট্যসমূহ:
//1. **key-value pair**: Mapত প্ৰত্যেকটি মানৰ লগত এক key থাকে।
//2. **key ৰ দ্বাৰা চাৰা**: Mapৰ মান keyৰ দ্বাৰা এক্সেছ কৰিব পাৰি।
//3. **মিউটেবল আৰু ইমিউটেবল**: Map মিউটেবল বা ইমিউটেবল হব পাৰে।
//
//*### ৪. **Collection যদি মিউটেবল আৰু ইমিউটেবল হয়**
//ডাৰ্টত ক’লেকশ্যনবোৰ মিউটেবল (mutable) বা ইমিউটেবল (immutable) ৰূপত ব্যৱহাৰ কৰা হয়। মিউটেবল ক’লেকশ্যনবোৰৰ মান সলনি কৰিব পৰা যায়, অথচ ইমিউটেবল ক’লেকশ্যনবোৰৰ মান সলনি নকৰা হয়।
//
//- **মিউটেবল ক’লেকশ্যন**: একে ক’লেকশ্যন সৃষ্টিৰ পাছত মান সলনি, মুছা বা যোগ কৰিব পাৰি।
//- **ইমিউটেবল ক’লেকশ্যন**: একে ক’লেকশ্যন সৃষ্টিৰ পাছত মান সলনি বা মুছা কৰিব নোৱাৰি।
//
//#### ইমিউটেবল ক’লেকশ্যনৰ উদাহৰণ:
//

//// ইমিউটেবল লিষ্ট
//final List<int> immutableList = [1, 2, 3];
//// immutableList.add(4);  // Error: Cannot modify an unmodifiable list
//```
//
//*### ৫. **Iterable (ইটাৰেবল)**
//
//ডাৰ্টত **Iterable** হৈছে এক সাধাৰণ ডাটা টাইপ য’ত ক’লেকশ্যনৰ মানসমূহক একে একে পৰিসৰে এক্সেছ (access) কৰিব পাৰি। List আৰু Set প্ৰকৃততে Iterableৰ ৰূপৰূপ।
//

//void main() {
//List<int> numbers = [1, 2, 3];
//
//for (var number in numbers) {
//print(number); // আউটপুটঃ 1 2 3
//}
//}
//```
//
//### ক’লেকশ্যনৰে কাম কৰাৰ অন্যান্য ফিচাৰ
//
//ডাৰ্টৰ ক’লেকশ্যনসমূহৰ সৈতে কাম কৰোঁতে কিছু অত্যন্ত উপকাৰী মেথড থাকে। উদাহৰণস্বৰূপ:
//
//1. **add()**: লিষ্ট বা ছেটত নতুন এলিমেণ্ট যোগ কৰাৰ বাবে ব্যৱহৃত হয়।
//2. **remove()**: ক’লেকশ্যনৰ পৰা এলিমেণ্ট মচি পেলাবলৈ।
//3. **contains()**: ক’লেকশ্যনত এটা মান উপস্থিত নে নাই পৰীক্ষা কৰিবলৈ।
//4. **forEach()**: ক’লেকশ্যনৰ প্রতি এলিমেণ্টত কাৰ্য্য কৰাৰ বাবে।
//

//void main() {
//Set<int> numbers = {1, 2, 3};
//
//numbers.add(4);
//numbers.remove(2);
//
//numbers.forEach((num) => print(num)); // আউটপুটঃ 1 3 4
//}
//```
//

//*### সাৰাংশ
//
//- **List**: অর্ডাৰ থকা, ডুপ্লিকেট মানৰ পৰা সঞ্চিত ক’লেকশ্যন।
//- **Set**: অর্ডাৰবিহীন, ডুপ্লিকেট মান নিষিদ্ধ ক’লেকশ্যন।
//- **Map**: key-value pair মাধ্যमे মান সঞ্চিত ক’লেকশ্যন।
//- **Iterable**: ক’লেকশ্যন এপিছাৰ য’ত মানসমূহ একে একে পৰিসৰে এক্সেছ কৰিব পাৰি।
//
//এইবোৰৰ ব্যৱহাৰ কৰি, ডাৰ্টত একাধিক ডাটা সঞ্চিত কৰি সেইবোৰৰ সৈতে প্ৰক্ৰিয়া কৰা সৰল আৰু অধিক পৰিসৰযুক্ত হয়।